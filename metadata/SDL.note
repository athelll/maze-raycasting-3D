= SDL NOTES =
*Author*: Okoronkwo Felix <br>
*Date*: 28/8/23 <br>
*Time*: 18.17 <br>
*Source*: [[https://lazyfoo.net/tutorials/SDL|SDL tutorial]]

== Introduction ==

=== Instance ===
An instance is a custom datatype created with to hold the  parameters:
- a *window* pointer : points to the window used to run the layer application.
- a *renderer* pointer : points to the initialized renderer connected to the window. handles updating the graphics on the window.

{{{c
typedef struct instance
{
  SDL_Window *window;
  SDL_renderer *renderer;
} SDL_Instance;
}}}

=== SDL Initialization ===
when creating a SDL application, SDL has to be initialized first. <br>
SDL is initialized with the `SDL_Init(SDL_INIT_VIDEO)` function.
if this function runs successfully, then the window and renderer can be initialized properly for further graphics implementation. <br>

- a new window is created with `SDL_CreateWindow(...)` <br>
- a new renderer is created with `SDL_CreateRenderer(instance.window, ...)`

when a newly created renderer is initialized it must be connected to the previously initialized window by passing the pointer to the indw as an argumant as seen in the above demostration where `instance.window` was passed into `SDL_CreateRenderer()`.
This renderer is responsible for updating graphics on the window.

=== MAIN Loop ===
An infinite loop is then started in the main function, which its job is to execute 3 functions per loop.

1) clear the renderer
2) draw stuff on the renderer
3) flush the renderer

all this is only achiveable when:
1) SDL has been intialized `SDL_Init(...)`
2) window has been initialized `SDL_CreateWindow(...)`
3) renderer has been initialized `SDL_CreateRenderer(SDL_window, ...)`
_as stated previously._

the loop should look something like this:

{{{c
  SDL_Instance new_instance;
  /**
  * initializes SDL instance and creates
  * new window and renderer by calling their respective
  * initialization functions explaained above and
  * passes the window and renderer into SDL_Instance new_instance.
  **/
  initialize_instance(&new_instance);

  while (1)
  {
    SDL_SetRenderDrawColor(instance.renderer, 0, 0, 0, 0);
    SDL_RenderClear(instance.renderer);
    //draw stuff here
    SDL_RenderPresent(instance.renderer);
  }
}}}

----
* the ellipsis `...` in above examples != variadic arguments. Read Documentaion to learn complete function designs.
* `SDL_DestroyWindow()` : destroys a window.
* `SDL_Quit()` : destroys SDL instance and quits SDL.

